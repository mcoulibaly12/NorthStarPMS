// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
model Company {
  id                     Int                        @id @default(autoincrement())
  companyName            String
  addressOne             String
  addressTwo             String?
  city                   String
  state                  String
  zipCode                String
  dunsNumber             Int?
  cageNumber             Int?
  websiteUrl             String
  phoneNumber            String
  certificates           Certificate[]
  socioeconDesignations  SocioEconDesignation[]
  users                  User[]                     @relation("CompanyUsers")
}

model Certificate {
  id              Int                  @id @default(autoincrement())
  description     String
  expirationDate  DateTime
  companyId       Int
  Company         Company              @relation(fields: [companyId], references: [id])
}

model SocioEconDesignation {
  sedID             Int                @id @default(autoincrement())
  sedDescription    String
  companyId         Int
  Company           Company            @relation(fields: [companyId], references: [id])
}

enum Role {
  ADMIN
  USER
  POC
}

model User {
  id                  Int               @id @default(autoincrement())
  email               String            @unique
  company             Company?          @relation("CompanyUsers", fields: [companyId], references: [id])
  companyId           Int?
  isAdmin             Boolean
  adminCompanyId      Int?
  roles               Role[]
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
}
model Customer {
  id                  Int               @id @default(autoincrement())
  title               String
  address             String
  email               String
  phoneNumber         String
  csz                 String
  pointOfContact      CustomerPointOfContact?
}

model CustomerPointOfContact {
  id                  Int               @id @default(autoincrement())
  firstName           String
  lastName            String
  email               String            @unique
  phoneNumber         String
  customerId          Int               @unique
  customer            Customer          @relation(fields: [customerId], references: [id])
}

model Proposal {
  id                    Int                   @id @default(autoincrement())
  activities            ProposalActivity[]
  proposalCode          Int                   @unique
  department            String
  agency                String
  title                 String
  solicitationNumber    Int
  bidApprovalDate       DateTime?
  dueDate               DateTime
  questionsDueDate      DateTime
  sourceOfRfp           String
  naics                 String
  setAside              Boolean
  contractType          String
  competition           String[]
  specialSkills         String
  clearenceRequirements String
  customerId           Int                   @unique
}

model ProposalActivity {
  id                  Int               @id @default(autoincrement())
  description         String
  proposalId          Int
  Proposal            Proposal          @relation(fields: [proposalId], references: [id])
}
